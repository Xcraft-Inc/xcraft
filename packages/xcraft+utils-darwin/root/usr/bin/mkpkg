#!/bin/bash

if [ "$1" = "-h" ] || [ "$1" = "--help" ] || [ -z "$1" ]; then
  echo "usage: mkpkg <package> <id> <version> <root> [bin] [scripts]"
  echo "             [signAppId] [signInstId]"
  echo "             [acUsername] [acPassword] [acTeamId]"
  exit 0
fi

package="$1"
id="$2"
version="$3"
root="$4"
bin="$5"
scripts="$6"
signAppId="$7"
signInstId="$8"
acUsername="$9"
acPassword="${10}"
acTeamId="${11}"

if [ -z "${package}" ];    then >&2 echo "The package path is missing"; exit 1; fi
if [ -z "${id}" ];         then >&2 echo "The package ID is missing"; exit 1; fi
if [ -z "${version}" ];    then >&2 echo "The package version is missing"; exit 1; fi
if [ -z "${root}" ];       then >&2 echo "The root base tree is missing"; exit 1; fi
# if [ -z "${bin}" ];        then >&2 echo "The binary is missing"; exit 1; fi
# if [ -z "${signAppId}" ];  then >&2 echo "The developer ID application is missing"; exit 1; fi
# if [ -z "${signInstId}" ]; then >&2 echo "The developer ID installer is missing"; exit 1; fi

shift 11

sign_bin()
{
  local target="$1"
  local signId="$2"

  codesign --sign "$signId" --force --options runtime --timestamp "$target"
  return $?
}

sign_pkg()
{
  local pkgIn="$1"
  local pkgOut="$2"
  local signId="$3"

  productsign --sign "$signId" "$pkgIn" "$pkgOut"
  return $?
}

build()
{
  local pkg="$1"
  local id="$2"
  local version="$3"
  local root="$4"
  local hooks=()

  if [ -n "$5" ]; then
    hooks=(--scripts "$5")
  fi

  pkgbuild --identifier "$id" --version "$version" --root "$root" "${hooks[@]}" "$pkg"
  return $?
}

notarize()
{
  local pkg="$1"
  local username="$2"
  local password="$3"
  local team_id="$4"

  if ! xcrun notarytool submit "$pkg" \
    --team-id "$team_id" \
    --apple-id "$username" \
    --password "$password" \
    --progress \
    --wait \
    --timeout 15m
  then
    return 1
  fi

  return 0
}

staple()
{
  local pkg="$1"

  echo "Staple ticket to $pkg"
  xcrun stapler staple "$pkg"
  return $?
}

if [ -n "$bin" ]; then
  # Sign the executable to wrap in a package
  echo "Sign $bin"
  if ! sign_bin "$bin" "$signAppId"; then
    >&2 echo "Signature of $bin has failed"
    exit 1
  fi
fi

# Build the pkg
echo "Build package $package"
if ! build "$package" "$id" "$version" "$root" "$scripts"; then
  >&2 echo "build of package $package has failed"
  exit 2
fi

if [ -n "$signInstId" ]; then
  # Sign the package
  echo "Sign $package"
  mv -f "$package" "${package%.pkg}_.pkg"
  if ! sign_pkg "${package%.pkg}_.pkg" "$package" "$signInstId"; then
    >&2 echo "Signature of package $package has failed"
    exit 3
  fi
  rm -f "${package%.pkg}_.pkg"
fi

if [ -n "$acUsername" ]; then
  # Notarize the package
  echo "Notarize $package"
  if ! notarize "$package" "$acUsername" "$acPassword" "$acTeamId"; then
    >&2 echo "Notarization of package $package has failed"
    exit 4
  fi

  # Staple the ticket into the package
  echo "Staple ticket into $package"
  if ! staple "$package"; then
    >&2 echo "Staple of the ticket into $package has failed"
    exit 5
  fi
fi

echo "Package build done"