'use strict';

var async = require ('async');


function Prompt () {
  return [{
    type    : 'input',
    name    : 'command',
    message : '$'
  }];
}

function Command (handler, params, desc) {
  this._parent  = null;
  this._name    = null;
  this._params  = params;
  this._desc    = desc;
  this._handler = handler;
  return this;
}

Command.prototype._setName = function (name) {
  this._name = name;
};

Command.prototype._setParent = function (parent) {
  this._parent = parent;
};

Command.prototype.isBuiltIn = function () {
  return this._params.builtIn ? true : false;
};

Command.prototype.help = function (onlyDesc) {
  var help = '';
  if (!onlyDesc) {
    help += ' ' + this._name;
    help += new Array (this._parent._helpWidth () - this._name.length).join (' ');
  }

  help += this._desc;
  return help;
};

Command.prototype.call = function () {
  return this._handler.apply (this, arguments);
};

function CommandsList () {
  this._helpLength = 0;
}

CommandsList.prototype._helpWidth = function () {
  return this._helpLength + 5;
};

CommandsList.prototype._add = function (cmd, obj) {
  if (cmd.length > this._helpLength) {
    this._helpLength = cmd.length;
  }

  obj._setName (cmd);
  obj._setParent (this);
  CommandsList.prototype[cmd] = obj;
};

function ShellCraft () {
  var self = this;

  this._exit = false;

  this.commands = new CommandsList ();
  this.commands._add ('exit', new Command (function () {
    self._exit = true;
  }, {builtIn: true}, 'exit the shell'));
  this.commands._add ('help', new Command (function () {
    Object.keys (Object.getPrototypeOf (self.commands)).forEach (function (fct) {
      if (!self.commands.hasOwnProperty (fct) && !/^_/.test(fct)) {
        console.log (self.commands[fct].help ());
      }
    });
  }, {builtIn: true}, 'list of commands'));

  this.options = {};
  this.prompt  = new Prompt ();
}

/**
 * @api private
 */
ShellCraft.prototype.isExit = function () {
  return this._exit;
};

/**
 * Register external commands.
 *
 * The module must return an array like this:
 * [{
 *   name: 'foobar',
 *   handler: function () {
 *     console.log ('run foobar');
 *   },
 *   params: {},
 *   desc: 'foobar description'
 * }]
 */
ShellCraft.prototype.registerExtension = function (shellExt) {
  var self = this;
  var extension = require (shellExt);

  extension.forEach (function (cmd) {
    self.commands._add (cmd.name, new Command (cmd.handler, cmd.params, cmd.desc));
  });
};

/**
 * @api private
 */
ShellCraft.prototype.shell = function (callback) {
  var self = this;
  var inquirer = require ('inquirer');

  var history = [];
  var iterator = 0;

  process.stdin.setRawMode (true);
  var uiPrompt = {};

  /*
   * Handle command history.
   */
  process.stdin.on ('keypress', function (chunk, key) {
    if (key) {
      switch (key.name) {
      case 'up': {
        if (iterator > 0) {
          --iterator;
        }
        uiPrompt.rl.write (null, {ctrl: true, name: 'u'});
        uiPrompt.rl.write (history[iterator]);
        break;
      }
      case 'down': {
        if (iterator < history.length - 1) {
          ++iterator;
        }
        uiPrompt.rl.write (null, {ctrl: true, name: 'u'});
        uiPrompt.rl.write (history[iterator]);
        break;
      }
      }
    }
  });

  async.forever (function (next) {
    uiPrompt = inquirer.prompt (self.prompt, function (answers) {
      var cmdArgs = answers.command.split (' ');
      var cmd = cmdArgs[0];
      cmdArgs.shift ();

      if (cmd.length && cmd !== history[history.length - 1]) {
        history.push (cmd);
      }
      iterator = history.length;

      try {
        self.commands[cmd].call (cmdArgs);
      } catch (ex) {
        if (answers.command.length) {
          console.log ('command ' + cmd + ' unknown');
        }
      }
      next (self.isExit () ? 'good bye' : null);
    });
  }, function (results) {
    if (callback) {
      callback (results);
    }
  });
};

/**
 * @api private
 */
ShellCraft.prototype.cli = function (callback) {
  var self = this;
  var program = require ('commander');

  program.version ('0.1.0');

  Object.keys (Object.getPrototypeOf (this.commands)).forEach (function (fct) {
    if (!self.commands.hasOwnProperty (fct) && !/^_/.test (fct) && !self.commands[fct].isBuiltIn ()) {
      program.option (fct, self.commands[fct].help (true), function (arg) {
        self.commands[fct].call (arg);
      });
    }
  });

  program.parse (process.argv);

  if (callback) {
    callback ();
  }
};

ShellCraft.prototype.begin = function (callback) {
  /* Run the Shell. */
  if (process.argv.length === 2) {
    this.shell (callback);
    return;
  }

  /* Run in command line. */
  this.cli (callback);
};

exports = module.exports = new ShellCraft ();
